#import matplotlib     # So we can run the code
#matplotlib.use("Agg") # headless

import matplotlib.pyplot as plt
import argparse
import numpy as np
from numpy import interp
import os
import sklearn
from sklearn.metrics import roc_curve, roc_auc_score
import scipy, scipy.signal
import datetime

if __name__ == "__main__":
    # Argument parsing
    parser = argparse.ArgumentParser("Generate ROC curves, or accuracy values for log files")
    parser.add_argument("-r", "--roc", help="ROC log file", type=argparse.FileType('r'), nargs='*')
    parser.add_argument("-a", "--acc", help="ACC log file", type=argparse.FileType('r'), nargs='*')
    parser.add_argument("--all", help="Flag if the log file is generated by cnnAll.py", dest="cnnAll", action="store_true")
    parser.add_argument("--log", help="Want to log output?", dest="log", action="store_true")
    parser.set_defaults(log=False, cnnAll=False)
    args = parser.parse_args()

    dt = str(datetime.datetime.now().replace(second=0, microsecond=0).isoformat("_"))

    if args.roc and not args.cnnAll:
        tft = []
        k = len(args.roc)

        for path in args.roc:
            tft.append(np.loadtxt(path.name, delimiter=","))

        plt.figure(figsize=(5, 5))

        tprs = []

        base_fpr = np.linspace(0, 1, 101)

        for i in np.arange(k):
            fpr = tft[i][0]
            tpr = tft[i][1]
            plt.plot(fpr, tpr, alpha=0.15, color="darkblue")
            tpr = interp(base_fpr, fpr, tpr)
            tpr[0] = 0.0
            tprs.append(tpr)

        tprs = np.array(tprs)
        mean_tprs = tprs.mean(axis=0)
        std = tprs.std(axis=0)

        tprs_upper = np.minimum(mean_tprs + std, 1)
        tprs_lower = mean_tprs - std

        if k == 1:
            plt.plot(base_fpr, mean_tprs, color="darkblue", label="ROC curve")
        else:
            plt.plot(base_fpr, mean_tprs, color="darkblue", label="Average ROC curve")
            plt.plot(base_fpr, scipy.signal.savgol_filter(mean_tprs,51,3),"--", color="darkblue", label="Smooth average ROC curve")
            plt.fill_between(base_fpr, tprs_lower, tprs_upper, color='lightblue', alpha=0.3)

        plt.plot([0, 1], [0, 1],'r--', label="Random guess")
        plt.xlim([-0.01, 1.01])
        plt.ylim([-0.01, 1.01])
        plt.ylabel('True Positive Rate')
        plt.xlabel('False Positive Rate')
        plt.title('Roc curve '+dt)
        plt.legend(loc=4)
        plt.axes().set_aspect('equal', 'datalim')

        if args.log:
            plt.savefig("./figures/rocCurves/"+dt+"-roc_curve.png")
        if not args.log:
            plt.show()


    if args.acc and not args.cnnAll:
        ssa = []
        for path in args.acc:
            ssa.append(np.loadtxt(path.name, delimiter=","))
        ssa = np.transpose(np.array(ssa))
        strOut = str("Specificity: "+str(ssa[0])+"\nAvg: "+str(np.mean(ssa[0]))+"\nSensitivity: "+str(ssa[1])+"\nAvg: "+str(np.mean(ssa[1]))+"\nROC AUC: "+str(ssa[2])+"\nAvg: "+str(np.mean(ssa[2])))

        if args.log:
            log = open("./logs/"+dt+"-accuracy_metrics.log","w+")
            log.write(strOut)
            log.close()
        if not args.log:
            print(strOut)


    if args.roc and args.cnnAll:
        tft = []
        tft.append(np.loadtxt(args.roc[0].name, delimiter=","))
        plt.figure(figsize=(5, 5))

        base_fpr = np.linspace(0, 1, 101)

        tft[0][1][0] = 0
        plt.plot(tft[0][0], tft[0][1], label="ROC of ill/healthy")

        plt.plot([0, 1], [0, 1],'r--', label="Random guess")
        plt.xlim([-0.01, 1.01])
        plt.ylim([-0.01, 1.01])
        plt.ylabel('True Positive Rate')
        plt.xlabel('False Positive Rate')
        plt.title('ROC between simulated healthy and all ill cubes\n'+dt)
        plt.legend(loc=4)
        plt.axes().set_aspect('equal', 'datalim')

        if args.log:
            plt.savefig("./figures/rocCurves/"+dt+"-CNN-all.png")
        if not args.log:
            plt.show


    if args.acc and args.cnnAll:
        ssa = []
        ssa.append(np.loadtxt(args.acc[0].name, delimiter=","))
        ssa = np.transpose(np.array(ssa))
        strOut = str("Normal: "+str(ssa[0])+"\nIschaemic: "+str(ssa[1])+"\nInfarcted: "+str(ssa[2])+"\nMixed: "+str(ssa[3])+"\nArtefact: "+str(ssa[4])+"\nOverall accuracy: "+str(ssa[5])+"\nROC AUC: "+str(ssa[6]))

        if args.log:
            log = open("./logs/"+dt+"-CNN-all.log","w+")
            log.write(strOut)
            log.close()
        if not args.log:
            print(strOut)
